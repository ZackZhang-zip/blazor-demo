@page "/handler"
@using System.IO;
@using System.Reflection;
@using NPOI;
@using NPOI.XSSF.UserModel;
@using NPOI.SS.UserModel;
@using blazor_demo.Data;
@using blazor_demo.Utils;
@using blazor_demo.MapApiHandler;

@inject IMapApiHandler mapApiHandler;

<h1>数据处理</h1>

<EditForm Model="@formModel" OnSubmit="@HandleSumbit">
    <InputFile id="excelfile" OnChange="@LoadFiles" />
    <div>
        <button type="submit">处理数据</button> <button>上传数据</button>
    </div>
</EditForm>


@code{
    private UploadFileForm formModel = new();
    IBrowserFile selectedFile = null;

    private async Task HandleSumbit()
    {
        await UploadedFileProceed(selectedFile);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        if(e.FileCount > 0) 
            selectedFile = e.File;
        else 
            selectedFile = null;
    }

    private async Task UploadedFileProceed(IBrowserFile file)
    {
        string filename = Path.GetFileName(file.Name);
        string ext = Path.GetExtension(file.Name);

        if(ext != ".xlsx")
        {
            throw new FileLoadException("文件不是xlsx");
        }

        // read excel
        MemoryStream ms = new MemoryStream();
        await file.OpenReadStream(10*1024*1024).CopyToAsync(ms);
        ms.Position = 0;
        XSSFWorkbook xssWorkbook = new XSSFWorkbook(ms);

        // analyze the sheet
        var sheet = xssWorkbook.GetSheetAt(0);
        var headerRow = sheet.GetRow(0);
        int cellCount = headerRow.LastCellNum;
        for (int i = (sheet.FirstRowNum + 1); i <= sheet.LastRowNum; i++)
        {
            var row = sheet.GetRow(i);
            if (row == null) continue;
            if (row.Cells.All(d => d.CellType == CellType.Blank)) continue;
            // read cell values
            PropertyData d = new PropertyData();
            d.Id = row.GetCellValue(0);
            d.City = row.GetCellValue(1);
            d.County = row.GetCellValue(2);
            d.PropertyName = row.GetCellValue(3);
            d.CorrectedName = row.GetCellValue(4);
            d.BizDistrict = row.GetCellValue(5);
            d.Address = row.GetCellValue(6);
            d.LngLat = row.GetCellValue(7);
            d.POIId = row.GetCellValue(8);
            d.POICity = row.GetCellValue(9);
            d.POICounty = row.GetCellValue(10);
            d.POIName = row.GetCellValue(11);
            d.POIAddress = row.GetCellValue(12);
            d.POIBizDistrict = row.GetCellValue(13);
            d.POIType = row.GetCellValue(14);
            d.POIXY = row.GetCellValue(15);
            d.Distance = row.GetCellValue(16);
            d.RecommandText = row.GetCellValue(17);
            d.Remarks = row.GetCellValue(18);
            d.ConfirmedName = row.GetCellValue(19);
            d.Adcode = row.GetCellValue(20);
            d.Status = row.GetCellValue(21);
            d.IsPrior = row.GetCellValue(22);

            // only -1, -2 needs to be proceeded
            int status = Convert.ToInt32(d.Status);
            if(status < 0) 
            {
                // fill out amap data
                d.PropertyApiHandle(mapApiHandler);

                // set row data
                row.SetCellValue(7, d.LngLat);
                row.SetCellValue(8, d.POIId);
                row.SetCellValue(9, d.POICity);
                row.SetCellValue(10, d.POICounty);
                row.SetCellValue(11, d.POIName);
                row.SetCellValue(12, d.POIAddress);
                row.SetCellValue(13, d.POIBizDistrict);
                row.SetCellValue(14, d.POIType);
                row.SetCellValue(15, d.POIXY);
                row.SetCellValue(16, d.Distance);
                row.SetCellValue(20, d.Adcode);

                // update status
                row.SetCellValue(21, (status * -1).ToString());
            }
        }

        // save file
        string folder = Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location), "output");
        if(!Directory.Exists(folder)) Directory.CreateDirectory(folder);

        using FileStream fs = new FileStream(Path.Combine(folder, $"{filename}-{DateTime.Now.Ticks.ToString()}.xlsx"), FileMode.CreateNew);
        xssWorkbook.Write(fs);
        xssWorkbook.Close();

        Console.WriteLine("Everything is done...");
    }
}